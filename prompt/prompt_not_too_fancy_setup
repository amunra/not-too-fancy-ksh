# Not too fancy
# By Adam Cimarosti
# https://github.com/amunra/not-too-fancy-zsh

# Based on:

# Purification
# by Matthieu Cneude
# https://github.com/Phantas0s/purification

# Based on:

# Purity
# by Kevin Lanni
# https://github.com/therealklanni/purity
# MIT License

# prompt:
# %F => color dict
# %f => reset color
# %~ => current path
# %* => time
# %n => username
# %m => shortname host
# %(?..) => prompt conditional - %(condition.true.false)

# Display git status
# TODO to refactor with switch / using someting else than grep
# Might be faster using ripgrep too
git_prompt_status() {
  local INDEX STATUS

  INDEX=$(command git status --porcelain -b 2> /dev/null)

  STATUS=""

  if $(echo "$INDEX" | command grep -E '^\?\? ' &> /dev/null); then
    STATUS="$ZSH_THEME_GIT_PROMPT_UNTRACKED$STATUS"
  fi

  if $(echo "$INDEX" | grep '^A  ' &> /dev/null); then
    STATUS="$ZSH_THEME_GIT_PROMPT_ADDED$STATUS"
  elif $(echo "$INDEX" | grep '^M  ' &> /dev/null); then
    STATUS="$ZSH_THEME_GIT_PROMPT_ADDED$STATUS"
  elif $(echo "$INDEX" | grep '^MM ' &> /dev/null); then
    STATUS="$ZSH_THEME_GIT_PROMPT_ADDED$STATUS"
  fi

  if $(echo "$INDEX" | grep '^ M ' &> /dev/null); then
    STATUS="$ZSH_THEME_GIT_PROMPT_MODIFIED$STATUS"
  elif $(echo "$INDEX" | grep '^AM ' &> /dev/null); then
    STATUS="$ZSH_THEME_GIT_PROMPT_MODIFIED$STATUS"
  elif $(echo "$INDEX" | grep '^MM ' &> /dev/null); then
    STATUS="$ZSH_THEME_GIT_PROMPT_MODIFIED$STATUS"
  elif $(echo "$INDEX" | grep '^ T ' &> /dev/null); then
    STATUS="$ZSH_THEME_GIT_PROMPT_MODIFIED$STATUS"
  fi

  if $(echo "$INDEX" | grep '^R  ' &> /dev/null); then
    STATUS="$ZSH_THEME_GIT_PROMPT_RENAMED$STATUS"
  fi

  if $(echo "$INDEX" | grep '^ D ' &> /dev/null); then
    STATUS="$ZSH_THEME_GIT_PROMPT_DELETED$STATUS"
  elif $(echo "$INDEX" | grep '^D  ' &> /dev/null); then
    STATUS="$ZSH_THEME_GIT_PROMPT_DELETED$STATUS"
  elif $(echo "$INDEX" | grep '^AD ' &> /dev/null); then
    STATUS="$ZSH_THEME_GIT_PROMPT_DELETED$STATUS"
  fi

  if $(command git rev-parse --verify refs/stash >/dev/null 2>&1); then
    STATUS="$ZSH_THEME_GIT_PROMPT_STASHED$STATUS"
  fi

  if $(echo "$INDEX" | grep '^UU ' &> /dev/null); then
    STATUS="$ZSH_THEME_GIT_PROMPT_UNMERGED$STATUS"
  fi

  if $(echo "$INDEX" | grep '^## [^ ]\+ .*ahead' &> /dev/null); then
    STATUS="$ZSH_THEME_GIT_PROMPT_AHEAD$STATUS"
  fi

  if $(echo "$INDEX" | grep '^## [^ ]\+ .*behind' &> /dev/null); then
    STATUS="$ZSH_THEME_GIT_PROMPT_BEHIND$STATUS"
  fi

  if $(echo "$INDEX" | grep '^## [^ ]\+ .*diverged' &> /dev/null); then
    STATUS="$ZSH_THEME_GIT_PROMPT_DIVERGED$STATUS"
  fi

  if [[ ! -z "$STATUS" ]]; then
    echo " [ $STATUS]"
  fi
}


prompt_git_branch() {
    autoload -Uz vcs_info 
    precmd_vcs_info() { vcs_info }
    precmd_functions+=( precmd_vcs_info )
    setopt prompt_subst
    zstyle ':vcs_info:git:*' formats '%b'
}

prompt_git_info() {
    [ ! -z "$vcs_info_msg_0_" ] && echo "$ZSH_THEME_GIT_PROMPT_PREFIX%F{white}$vcs_info_msg_0_%f$ZSH_THEME_GIT_PROMPT_SUFFIX"
}

prompt_purity_precmd() {
    # Pass a line before each prompt
    # print -P ''
}

setopt prompt_subst

# shorten_path() {
#   local maxlen=45  # Set your desired maximum length
#   # local curr_path="$PWD"  # Capture the current working directory

#   # Replace $HOME with ~ for brevity
#   local curr_path="${PWD/#$HOME/~}"

#   # If the path is longer than maxlen, truncate it
#   if (( ${#curr_path} > maxlen )); then
#     curr_path="‚Ä¶${curr_path: -maxlen}"  # Get the last 'maxlen' characters of the path
#   fi

#   echo "$curr_path"
# }

shorten_path() {
    local maxlen=45  # Set your desired maximum length
    local curr_path="${PWD/#$HOME/~}"  # Replace $HOME with ~ for brevity
    local colored_path=""
    local is_shortened=0  # Flag to check if the path is shortened

    # Define a lookup table for gray values
    local gray_values=( "#191919" "#333333" "#4d4d4d" "#666666" "#808080" "#999999" "#b3b3b3" "#cccccc" "#e6e6e6" "#ffffff" )

    # If the path is longer than maxlen, truncate it
    if (( ${#curr_path} > maxlen )); then
        curr_path="‚Ä¶${curr_path: -maxlen}"  # Get the last 'maxlen' characters of the path
        is_shortened=1  # Set the flag indicating the path is shortened
    fi

    # Color the starting trimmed characters in shades of gray only if shortened
    if (( is_shortened )); then
        for ((i = 0; i < ${#curr_path}; i++)); do
            char="${curr_path:$i:1}"  # Get the current character
            if ((i < 10)); then
                # Use the lookup table to get the gray color
                gray_color="${gray_values[i]}"
                colored_path+="%F{${gray_color}}$char%f"  # Set color
            else
                colored_path+="%F{#ffffff}$char%f"  # Remaining chars in white
            fi
        done
    else
        # If the path is not shortened, return it as is
        colored_path="%F{#ffffff}$curr_path%f"
    fi

    echo "$colored_path"  # Output the colored path
}

prompt_not_too_fancy_setup() {
    # Display git branch

    autoload -Uz add-zsh-hook
    add-zsh-hook precmd prompt_purity_precmd

    # ZSH_THEME_GIT_PROMPT_PREFIX=" %F{red}Œª%f:"
    ZSH_THEME_GIT_PROMPT_PREFIX=" %F{red}üì¶%f:"
    ZSH_THEME_GIT_PROMPT_DIRTY=""
    ZSH_THEME_GIT_PROMPT_CLEAN=""

    ZSH_THEME_GIT_PROMPT_ADDED="%F{green}+%f "
    ZSH_THEME_GIT_PROMPT_MODIFIED="%F{blue}M%f "     # Modified (replaced 'ÔÅ©')
    ZSH_THEME_GIT_PROMPT_DELETED="%F{red}x%f "       # Deleted (same symbol)
    ZSH_THEME_GIT_PROMPT_RENAMED="%F{magenta}->%f "  # Renamed (replaced '‚ûú')
    ZSH_THEME_GIT_PROMPT_UNMERGED="%F{yellow}=%f "   # Unmerged (replaced '‚ïê')
    ZSH_THEME_GIT_PROMPT_UNTRACKED="%F{white}*%f "   # Untracked (replaced 'ÔÑë')
    ZSH_THEME_GIT_PROMPT_STASHED="%B%F{red}!%f%b "   # Stashed (replaced 'ÔÑ™')
    ZSH_THEME_GIT_PROMPT_BEHIND="%B%F{red}‚Üì%f%b "    # Behind (replaced 'ÔÖµ')
    ZSH_THEME_GIT_PROMPT_AHEAD="%B%F{green}‚Üë%f%b "   # Ahead (replaced 'ÔÖ∂')
    
    prompt_git_branch
    RPROMPT='$(prompt_git_info) $(git_prompt_status)'
    PROMPT=$'%F{#f0a5c7}%D{%H:%M:%S}%f %F{white}$(shorten_path) %(?.%B%F{blue}‚ùØ%f%b.%B%F{red}‚ùØ%f%b) '

    # Add the hostname if logged in via SSH
    if [[ -n "$SSH_CONNECTION" ]]; then
        PROMPT=$'%F{#8cff80}%m%f '$PROMPT  # %m shows the hostname
    fi
}

prompt_not_too_fancy_setup

